üìò Explica√ß√£o Did√°tica do C√≥digo
üîπ Estrutura b√°sica
public class Student extends Person {


A classe Student herda de Person (por isso usamos extends).

Isso significa que ela vai ter tudo o que Person tem (atributos name, age, email) + os atributos espec√≠ficos de aluno.

üîπ Atributos do Student
private String varRegistrationNumber;
private String varCourse;
private double[] gradesArray;
private int varYear;
private int varAttendancePercentage;


varRegistrationNumber ‚Üí matr√≠cula do aluno.

varCourse ‚Üí curso ou s√©rie.

gradesArray ‚Üí notas do aluno em formato de array (double[]).

varYear ‚Üí ano letivo.

varAttendancePercentage ‚Üí presen√ßa do aluno em % (ex: 80 significa 80%).

üìå Todos os nomes seguem a regra que voc√™ pediu: prefixo var em vari√°veis e Array no caso das notas.

üîπ Construtores (formas de criar um aluno)

Um construtor √© como o ‚Äúmolde‚Äù que usamos para criar um objeto.

1Ô∏è‚É£ Criar apenas com matr√≠cula:

public Student(String varRegistrationNumber) {
    super(null, 0, null);
    this.varRegistrationNumber = varRegistrationNumber;
}


super(null, 0, null) ‚Üí chama o construtor de Person (mesmo que name, age, email fiquem nulos ou 0).

Define apenas a matr√≠cula.

2Ô∏è‚É£ Criar com matr√≠cula + curso:

public Student(String varRegistrationNumber, String varCourse) {
    super(null, 0, null);
    this.varRegistrationNumber = varRegistrationNumber;
    this.varCourse = varCourse;
}


Aqui al√©m da matr√≠cula, j√° sabemos o curso.

3Ô∏è‚É£ Criar com todos os dados:

public Student(String varName, int varAge, String varEmail,
               String varRegistrationNumber, String varCourse) {
    super(varName, varAge, varEmail); // chama o Person
    this.varRegistrationNumber = varRegistrationNumber;
    this.varCourse = varCourse;
}


Aqui usamos o super corretamente para inicializar os atributos herdados de Person.

Esse √© o construtor mais completo.

üîπ Getters e Setters (com encadeamento)

Exemplo:

public String getCourse() { return varCourse; }
public Student setCourse(String varCourse) {
    this.varCourse = varCourse;
    return this; // permite chaining
}


O getCourse retorna o valor da vari√°vel.

O setCourse atualiza o valor e retorna this.

Retornar this permite escrever:

student.setCourse("Math").setYear(2024).setAttendancePercentage(90);


üëâ Isso √© method chaining (chamadas encadeadas).

üîπ M√©todos herdados da Person
@Override public String getRoleDescription() { return "Student"; }
@Override public String getUniqueIdentifier() { return varRegistrationNumber; }


getRoleDescription ‚Üí sempre retorna "Student" porque essa √© a fun√ß√£o da pessoa na institui√ß√£o.

getUniqueIdentifier ‚Üí aqui o identificador √∫nico do aluno √© a matr√≠cula.

üîπ 8 m√©todos obrigat√≥rios

Agora os m√©todos que fazem a l√≥gica do aluno:

M√©dia das notas

public double calculateAverageGrade() {
    if (gradesArray == null || gradesArray.length == 0) return 0;
    double sum = 0;
    for (double g : gradesArray) sum += g;
    return sum / gradesArray.length;
}


Se n√£o tiver notas, retorna 0.

Sen√£o, soma todas e divide pelo tamanho do array.

Aprovado?

public boolean hasPassed() { return calculateAverageGrade() >= 6; }


Se a m√©dia for 6 ou mais, retorna true (aprovado).

Tem presen√ßa m√≠nima?

public boolean hasMinimumAttendance() { return varAttendancePercentage >= 75; }


Retorna true se a presen√ßa for 75% ou mais.

Iniciais do nome

public String getInitials() {
    if (getName() == null) return "";
    String[] parts = getName().split(" ");
    String ini = "";
    for (String p : parts) ini += p.charAt(0);
    return ini.toUpperCase();
}


Pega o nome do aluno, separa em palavras, e junta s√≥ as primeiras letras.

Exemplo: "Ana Maria Souza" ‚Üí "AMS".

Email formatado

public String getFormattedEmail() {
    return getEmail() == null ? "" : getEmail().toLowerCase().trim();
}


Transforma em min√∫sculo e remove espa√ßos extras.

Status acad√™mico

public String getAcademicStatus() {
    return varCourse + " - Year " + varYear +
           " | Avg " + calculateAverageGrade() +
           " | Att " + varAttendancePercentage + "%";
}


Monta uma frase com curso, ano, m√©dia e presen√ßa.

Exemplo: "Math - Year 2024 | Avg 7.5 | Att 80%".

üìå Resumo

Student herda de Person.

Tem atributos espec√≠ficos de aluno (matr√≠cula, curso, notas, ano e presen√ßa).

Construtores diferentes para criar objetos de v√°rias formas.

Getters e Setters usam method chaining.

Implementa m√©todos obrigat√≥rios (getRoleDescription, getUniqueIdentifier).

Implementa 8 m√©todos extras que lidam com notas, presen√ßa e informa√ß√µes do aluno.
